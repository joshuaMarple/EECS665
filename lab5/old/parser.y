%{
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

extern int yylineno;
int yydebug = 1;
char* func = "";
extern void yyerror( char* );
extern int yylex();
%}

%union {
    char* id;
}
%start top

%token <id> ID
%token PREPROC INTVAL DBLVAL CHARVAL FLTVAL STRVAL VOID SHORT LONG DOUBLE CHAR INT FLOAT EQ LE ADD DIV AND BITXOR LSH SETADD SETDIV SETAND SETRSH NE GT SUB MOD BITOR NOT RSH SETSUB SETMOD SETXOR GE LT MUL OR BITAND COM SET SETMUL SETOR SETLSH RETURN WHILE SWITCH DEFAULT ELSE BREAK DO FOR CASE IF CONTINUE GOTO UNSIGNED STRUCT CONST EXTERN REGISTER TYPEDEF UNION STATIC AUTO SIZEOF


%%

/*********************************************************
 * The top-level rule for the parser. This rule will
 * parse either nothing or a single expression. 
 ********************************************************/
top : /* empty rule */
	| fund top 

fund : funs '{' funb '}'

funs : type ID '(' paraml ')' { printf("%s;\n", $2); func = $2; }
	//| type MUL ID '(' paraml ')'
	//| type MUL ID '[' ']' '(' paraml ')'

paraml : 
	| param
	| param ',' paraml

param : type ID
	| type MUL ID
	| type MUL ID '[' ']'

funb : decl
	| statement
	| decl funb
	| statement funb

decl : type ID ';'

statement : matched
	| unmatched

matched : IF '(' expr ')' matched ELSE matched 
	| other
	| WHILE '(' expr ')' matched
	| '{' matches '}'

other : ID SET expr ';'
	| RETURN expr ';'
	| RETURN funs ';'
	| ID '(' exprl ')' ';' {printf("%s -> %s;\n", func, $1);}

matches : matches matched
	| matched

unmatched : IF '(' expr ')' matched ELSE unmatched
	| IF '(' expr ')' statement
	| WHILE '(' expr ')' unmatched 
	| '{' unmatches '}'

unmatches : unmatches unmatched
	| unmatched

expr : expr DIV oop1
	| expr MUL oop1
	| expr MOD oop1
	| oop1

oop1 : oop1 ADD oop2
	| oop1 SUB oop2
	| oop2

oop2 : oop2 LT oop3
	| oop2 LE oop3
	| oop2 GT oop3
	| oop2 GE oop3
	| oop2 LSH oop3
	| oop2 RSH oop3
	| oop3

oop3 : oop3 EQ oop4
	| oop3 NE oop4
	| oop4

oop4 : oop4 BITAND oop5
	| oop5

oop5 : oop5 BITXOR oop6
	| oop6

oop6 : oop6 BITOR oop7
	| oop7

oop7 : INTVAL
	| STRVAL
	| CHARVAL
	| DBLVAL
	| FLTVAL
	| ID '(' exprl ')' {printf("%s -> %s;\n", func, $1);}
	| ID 

exprl : 
	| expr ',' exprl
	| expr

type : VOID 
	| CHAR
	| SHORT 
	| INT 
	| LONG 
	| FLOAT 
	| DOUBLE


%%

/*********************************************************
 * This method is invoked by the parser whenever an
 * error is encountered during parsing. We just print
 * the error to stderr.
 ********************************************************/
void yyerror( char *err ) {
    fprintf( stderr, "at line %d: %s\n", yylineno, err );
}

/*********************************************************
 * This is the main function for the calculator
 * program. We invoke the parser and return the
 * error/success code generated by it.
 ********************************************************/
int main( int argc, const char *argv[] ) {
    printf( "digraph funcgraph {\n" );
    int res = yyparse();
    printf( "}\n" );
    return res;
}
